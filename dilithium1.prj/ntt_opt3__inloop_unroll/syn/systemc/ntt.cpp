// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ntt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ntt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ntt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> ntt::ap_ST_fsm_state1 = "1";
const sc_lv<13> ntt::ap_ST_fsm_state2 = "10";
const sc_lv<13> ntt::ap_ST_fsm_state3 = "100";
const sc_lv<13> ntt::ap_ST_fsm_state4 = "1000";
const sc_lv<13> ntt::ap_ST_fsm_state5 = "10000";
const sc_lv<13> ntt::ap_ST_fsm_state6 = "100000";
const sc_lv<13> ntt::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> ntt::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> ntt::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> ntt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> ntt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> ntt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> ntt::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> ntt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ntt::ap_const_lv32_1 = "1";
const sc_lv<32> ntt::ap_const_lv32_2 = "10";
const sc_lv<1> ntt::ap_const_lv1_1 = "1";
const sc_lv<1> ntt::ap_const_lv1_0 = "0";
const sc_lv<32> ntt::ap_const_lv32_3 = "11";
const sc_lv<32> ntt::ap_const_lv32_4 = "100";
const sc_lv<32> ntt::ap_const_lv32_5 = "101";
const sc_lv<32> ntt::ap_const_lv32_6 = "110";
const sc_lv<32> ntt::ap_const_lv32_7 = "111";
const sc_lv<32> ntt::ap_const_lv32_8 = "1000";
const sc_lv<32> ntt::ap_const_lv32_9 = "1001";
const sc_lv<29> ntt::ap_const_lv29_80 = "10000000";
const sc_lv<31> ntt::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> ntt::ap_const_lv32_C = "1100";
const sc_lv<32> ntt::ap_const_lv32_A = "1010";
const sc_lv<32> ntt::ap_const_lv32_B = "1011";
const sc_lv<29> ntt::ap_const_lv29_0 = "00000000000000000000000000000";
const sc_lv<32> ntt::ap_const_lv32_1E = "11110";
const sc_lv<23> ntt::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> ntt::ap_const_lv32_1C = "11100";
const sc_lv<31> ntt::ap_const_lv31_1 = "1";
const sc_lv<32> ntt::ap_const_lv32_FC7FDFFF = "11111100011111111101111111111111";
const sc_lv<55> ntt::ap_const_lv55_7FE001 = "11111111110000000000001";
const sc_lv<32> ntt::ap_const_lv32_20 = "100000";
const sc_lv<32> ntt::ap_const_lv32_37 = "110111";
const sc_lv<24> ntt::ap_const_lv24_FFC002 = "111111111100000000000010";
const bool ntt::ap_const_boolean_1 = true;

ntt::ntt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    zetas_U = new ntt_zetas("zetas_U");
    zetas_U->clk(ap_clk);
    zetas_U->reset(ap_rst);
    zetas_U->address0(zetas_address0);
    zetas_U->ce0(zetas_ce0);
    zetas_U->q0(zetas_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_cast1_fu_284_p1);
    sensitive << ( temp_1_reg_415 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_140_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_140_p2 );

    SC_METHOD(thread_icmp_fu_156_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_146_p4 );

    SC_METHOD(thread_j_1_fu_244_p2);
    sensitive << ( j1_reg_121 );

    SC_METHOD(thread_k_1_fu_184_p2);
    sensitive << ( k_fu_60 );

    SC_METHOD(thread_len_1_fu_180_p1);
    sensitive << ( tmp_17_fu_170_p4 );

    SC_METHOD(thread_len_cast_cast4_fu_136_p1);
    sensitive << ( len_reg_97 );

    SC_METHOD(thread_p_address0);
    sensitive << ( p_addr_reg_390 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( p_addr_1_reg_395 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_s_fu_234_p1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_p_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_p_d0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_10_fu_315_p2 );
    sensitive << ( tmp_11_fu_325_p2 );

    SC_METHOD(thread_p_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_start_cast_fu_216_p1);
    sensitive << ( start_fu_208_p3 );

    SC_METHOD(thread_start_fu_208_p3);
    sensitive << ( tmp_5_fu_194_p2 );
    sensitive << ( tmp_13_fu_200_p1 );
    sensitive << ( tmp_15_fu_204_p1 );

    SC_METHOD(thread_t_1_cast_fu_287_p1);
    sensitive << ( t_1_reg_430 );

    SC_METHOD(thread_t_1_fu_278_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( t_1_fu_278_p10 );

    SC_METHOD(thread_t_1_fu_278_p10);
    sensitive << ( temp_reg_425 );

    SC_METHOD(thread_t_1_fu_278_p2);
    sensitive << ( t_1_fu_278_p1 );

    SC_METHOD(thread_t_2_fu_290_p2);
    sensitive << ( t_1_cast_fu_287_p1 );
    sensitive << ( a_assign_cast1_fu_284_p1 );

    SC_METHOD(thread_t_3_fu_322_p1);
    sensitive << ( tmp_14_reg_435 );

    SC_METHOD(thread_temp_1_fu_261_p0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( temp_1_fu_261_p00 );

    SC_METHOD(thread_temp_1_fu_261_p00);
    sensitive << ( p_load_reg_410 );

    SC_METHOD(thread_temp_1_fu_261_p1);
    sensitive << ( tmp_6_cast_reg_382 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_temp_1_fu_261_p2);
    sensitive << ( temp_1_fu_261_p0 );
    sensitive << ( temp_1_fu_261_p1 );

    SC_METHOD(thread_temp_fu_270_p2);
    sensitive << ( tmp_18_reg_420 );

    SC_METHOD(thread_tmp_10_fu_315_p2);
    sensitive << ( p_q0 );
    sensitive << ( tmp_11_cast_fu_311_p1 );

    SC_METHOD(thread_tmp_11_cast_fu_311_p1);
    sensitive << ( tmp_7_fu_306_p2 );

    SC_METHOD(thread_tmp_11_fu_325_p2);
    sensitive << ( p_q0 );
    sensitive << ( t_3_fu_322_p1 );

    SC_METHOD(thread_tmp_12_fu_250_p2);
    sensitive << ( len_cast_cast4_reg_339 );
    sensitive << ( start_cast_reg_377 );

    SC_METHOD(thread_tmp_13_fu_200_p1);
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_tmp_15_fu_204_p1);
    sensitive << ( tmp_4_fu_189_p2 );

    SC_METHOD(thread_tmp_17_fu_170_p4);
    sensitive << ( len_reg_97 );

    SC_METHOD(thread_tmp_18_fu_266_p1);
    sensitive << ( temp_1_fu_261_p2 );

    SC_METHOD(thread_tmp_1_fu_146_p4);
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_tmp_3_fu_165_p1);
    sensitive << ( k_fu_60 );

    SC_METHOD(thread_tmp_4_fu_189_p2);
    sensitive << ( len_cast_cast4_reg_339 );
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_tmp_5_fu_194_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_4_fu_189_p2 );
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_tmp_6_cast_fu_220_p1);
    sensitive << ( zetas_q0 );

    SC_METHOD(thread_tmp_6_fu_239_p1);
    sensitive << ( j1_reg_121 );

    SC_METHOD(thread_tmp_7_fu_306_p2);
    sensitive << ( tmp_14_reg_435 );

    SC_METHOD(thread_tmp_8_fu_224_p2);
    sensitive << ( tmp_4_reg_372 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j1_reg_121 );

    SC_METHOD(thread_tmp_9_fu_229_p2);
    sensitive << ( len_cast_cast4_reg_339 );
    sensitive << ( j1_reg_121 );

    SC_METHOD(thread_tmp_fu_140_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( len_reg_97 );

    SC_METHOD(thread_tmp_s_fu_234_p1);
    sensitive << ( tmp_9_fu_229_p2 );

    SC_METHOD(thread_zetas_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_165_p1 );

    SC_METHOD(thread_zetas_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_8_fu_224_p2 );
    sensitive << ( tmp_fu_140_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ntt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_address0, "(port)p_address0");
    sc_trace(mVcdFile, p_ce0, "(port)p_ce0");
    sc_trace(mVcdFile, p_we0, "(port)p_we0");
    sc_trace(mVcdFile, p_d0, "(port)p_d0");
    sc_trace(mVcdFile, p_q0, "(port)p_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zetas_address0, "zetas_address0");
    sc_trace(mVcdFile, zetas_ce0, "zetas_ce0");
    sc_trace(mVcdFile, zetas_q0, "zetas_q0");
    sc_trace(mVcdFile, len_cast_cast4_fu_136_p1, "len_cast_cast4_fu_136_p1");
    sc_trace(mVcdFile, len_cast_cast4_reg_339, "len_cast_cast4_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_fu_156_p2, "icmp_fu_156_p2");
    sc_trace(mVcdFile, len_1_fu_180_p1, "len_1_fu_180_p1");
    sc_trace(mVcdFile, k_1_fu_184_p2, "k_1_fu_184_p2");
    sc_trace(mVcdFile, k_1_reg_367, "k_1_reg_367");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_4_fu_189_p2, "tmp_4_fu_189_p2");
    sc_trace(mVcdFile, tmp_4_reg_372, "tmp_4_reg_372");
    sc_trace(mVcdFile, start_cast_fu_216_p1, "start_cast_fu_216_p1");
    sc_trace(mVcdFile, start_cast_reg_377, "start_cast_reg_377");
    sc_trace(mVcdFile, tmp_6_cast_fu_220_p1, "tmp_6_cast_fu_220_p1");
    sc_trace(mVcdFile, tmp_6_cast_reg_382, "tmp_6_cast_reg_382");
    sc_trace(mVcdFile, p_addr_reg_390, "p_addr_reg_390");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_8_fu_224_p2, "tmp_8_fu_224_p2");
    sc_trace(mVcdFile, p_addr_1_reg_395, "p_addr_1_reg_395");
    sc_trace(mVcdFile, j_1_fu_244_p2, "j_1_fu_244_p2");
    sc_trace(mVcdFile, j_1_reg_400, "j_1_reg_400");
    sc_trace(mVcdFile, tmp_12_fu_250_p2, "tmp_12_fu_250_p2");
    sc_trace(mVcdFile, p_load_reg_410, "p_load_reg_410");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, temp_1_fu_261_p2, "temp_1_fu_261_p2");
    sc_trace(mVcdFile, temp_1_reg_415, "temp_1_reg_415");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_18_fu_266_p1, "tmp_18_fu_266_p1");
    sc_trace(mVcdFile, tmp_18_reg_420, "tmp_18_reg_420");
    sc_trace(mVcdFile, temp_fu_270_p2, "temp_fu_270_p2");
    sc_trace(mVcdFile, temp_reg_425, "temp_reg_425");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, t_1_fu_278_p2, "t_1_fu_278_p2");
    sc_trace(mVcdFile, t_1_reg_430, "t_1_reg_430");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_14_reg_435, "tmp_14_reg_435");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, len_reg_97, "len_reg_97");
    sc_trace(mVcdFile, j_reg_109, "j_reg_109");
    sc_trace(mVcdFile, tmp_fu_140_p2, "tmp_fu_140_p2");
    sc_trace(mVcdFile, j1_reg_121, "j1_reg_121");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_3_fu_165_p1, "tmp_3_fu_165_p1");
    sc_trace(mVcdFile, tmp_s_fu_234_p1, "tmp_s_fu_234_p1");
    sc_trace(mVcdFile, tmp_6_fu_239_p1, "tmp_6_fu_239_p1");
    sc_trace(mVcdFile, k_fu_60, "k_fu_60");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_10_fu_315_p2, "tmp_10_fu_315_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_11_fu_325_p2, "tmp_11_fu_325_p2");
    sc_trace(mVcdFile, tmp_1_fu_146_p4, "tmp_1_fu_146_p4");
    sc_trace(mVcdFile, tmp_17_fu_170_p4, "tmp_17_fu_170_p4");
    sc_trace(mVcdFile, tmp_5_fu_194_p2, "tmp_5_fu_194_p2");
    sc_trace(mVcdFile, tmp_13_fu_200_p1, "tmp_13_fu_200_p1");
    sc_trace(mVcdFile, tmp_15_fu_204_p1, "tmp_15_fu_204_p1");
    sc_trace(mVcdFile, start_fu_208_p3, "start_fu_208_p3");
    sc_trace(mVcdFile, tmp_9_fu_229_p2, "tmp_9_fu_229_p2");
    sc_trace(mVcdFile, temp_1_fu_261_p0, "temp_1_fu_261_p0");
    sc_trace(mVcdFile, temp_1_fu_261_p1, "temp_1_fu_261_p1");
    sc_trace(mVcdFile, t_1_fu_278_p1, "t_1_fu_278_p1");
    sc_trace(mVcdFile, t_1_cast_fu_287_p1, "t_1_cast_fu_287_p1");
    sc_trace(mVcdFile, a_assign_cast1_fu_284_p1, "a_assign_cast1_fu_284_p1");
    sc_trace(mVcdFile, t_2_fu_290_p2, "t_2_fu_290_p2");
    sc_trace(mVcdFile, tmp_7_fu_306_p2, "tmp_7_fu_306_p2");
    sc_trace(mVcdFile, tmp_11_cast_fu_311_p1, "tmp_11_cast_fu_311_p1");
    sc_trace(mVcdFile, t_3_fu_322_p1, "t_3_fu_322_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, t_1_fu_278_p10, "t_1_fu_278_p10");
    sc_trace(mVcdFile, temp_1_fu_261_p00, "temp_1_fu_261_p00");
#endif

    }
    mHdltvinHandle.open("ntt.hdltvin.dat");
    mHdltvoutHandle.open("ntt.hdltvout.dat");
}

ntt::~ntt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete zetas_U;
}

void ntt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j1_reg_121 = j_1_reg_400.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j1_reg_121 = j_reg_109.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_224_p2.read()))) {
        j_reg_109 = tmp_12_fu_250_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_140_p2.read()))) {
        j_reg_109 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_224_p2.read()))) {
        k_fu_60 = k_1_reg_367.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_fu_60 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_fu_156_p2.read(), ap_const_lv1_0))) {
        len_reg_97 = len_1_fu_180_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        len_reg_97 = ap_const_lv29_80;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_224_p2.read()))) {
        j_1_reg_400 = j_1_fu_244_p2.read();
        p_addr_1_reg_395 =  (sc_lv<8>) (tmp_6_fu_239_p1.read());
        p_addr_reg_390 =  (sc_lv<8>) (tmp_s_fu_234_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_1_reg_367 = k_1_fu_184_p2.read();
        start_cast_reg_377 = start_cast_fu_216_p1.read();
        tmp_4_reg_372 = tmp_4_fu_189_p2.read();
        tmp_6_cast_reg_382 = tmp_6_cast_fu_220_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        len_cast_cast4_reg_339 = len_cast_cast4_fu_136_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        p_load_reg_410 = p_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        t_1_reg_430 = t_1_fu_278_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_1_reg_415 = temp_1_fu_261_p2.read();
        tmp_18_reg_420 = tmp_18_fu_266_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp_reg_425 = temp_fu_270_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_14_reg_435 = t_2_fu_290_p2.read().range(55, 32);
    }
}

void ntt::thread_a_assign_cast1_fu_284_p1() {
    a_assign_cast1_fu_284_p1 = esl_zext<56,55>(temp_1_reg_415.read());
}

void ntt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ntt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ntt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void ntt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void ntt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void ntt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ntt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ntt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ntt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ntt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ntt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void ntt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void ntt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void ntt::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_140_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ntt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ntt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_140_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ntt::thread_icmp_fu_156_p2() {
    icmp_fu_156_p2 = (!tmp_1_fu_146_p4.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_146_p4.read() == ap_const_lv23_0);
}

void ntt::thread_j_1_fu_244_p2() {
    j_1_fu_244_p2 = (!ap_const_lv31_1.is_01() || !j1_reg_121.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(j1_reg_121.read()));
}

void ntt::thread_k_1_fu_184_p2() {
    k_1_fu_184_p2 = (!ap_const_lv32_1.is_01() || !k_fu_60.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(k_fu_60.read()));
}

void ntt::thread_len_1_fu_180_p1() {
    len_1_fu_180_p1 = esl_zext<29,28>(tmp_17_fu_170_p4.read());
}

void ntt::thread_len_cast_cast4_fu_136_p1() {
    len_cast_cast4_fu_136_p1 = esl_zext<31,29>(len_reg_97.read());
}

void ntt::thread_p_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        p_address0 = p_addr_reg_390.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        p_address0 = p_addr_1_reg_395.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_address0 =  (sc_lv<8>) (tmp_s_fu_234_p1.read());
    } else {
        p_address0 = "XXXXXXXX";
    }
}

void ntt::thread_p_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        p_ce0 = ap_const_logic_1;
    } else {
        p_ce0 = ap_const_logic_0;
    }
}

void ntt::thread_p_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        p_d0 = tmp_11_fu_325_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        p_d0 = tmp_10_fu_315_p2.read();
    } else {
        p_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ntt::thread_p_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        p_we0 = ap_const_logic_1;
    } else {
        p_we0 = ap_const_logic_0;
    }
}

void ntt::thread_start_cast_fu_216_p1() {
    start_cast_fu_216_p1 = esl_zext<31,30>(start_fu_208_p3.read());
}

void ntt::thread_start_fu_208_p3() {
    start_fu_208_p3 = (!tmp_5_fu_194_p2.read()[0].is_01())? sc_lv<30>(): ((tmp_5_fu_194_p2.read()[0].to_bool())? tmp_13_fu_200_p1.read(): tmp_15_fu_204_p1.read());
}

void ntt::thread_t_1_cast_fu_287_p1() {
    t_1_cast_fu_287_p1 = esl_zext<56,55>(t_1_reg_430.read());
}

void ntt::thread_t_1_fu_278_p1() {
    t_1_fu_278_p1 =  (sc_lv<32>) (t_1_fu_278_p10.read());
}

void ntt::thread_t_1_fu_278_p10() {
    t_1_fu_278_p10 = esl_zext<55,32>(temp_reg_425.read());
}

void ntt::thread_t_1_fu_278_p2() {
    t_1_fu_278_p2 = (!ap_const_lv55_7FE001.is_01() || !t_1_fu_278_p1.read().is_01())? sc_lv<55>(): sc_biguint<55>(ap_const_lv55_7FE001) * sc_biguint<32>(t_1_fu_278_p1.read());
}

void ntt::thread_t_2_fu_290_p2() {
    t_2_fu_290_p2 = (!t_1_cast_fu_287_p1.read().is_01() || !a_assign_cast1_fu_284_p1.read().is_01())? sc_lv<56>(): (sc_biguint<56>(t_1_cast_fu_287_p1.read()) + sc_biguint<56>(a_assign_cast1_fu_284_p1.read()));
}

void ntt::thread_t_3_fu_322_p1() {
    t_3_fu_322_p1 = esl_zext<32,24>(tmp_14_reg_435.read());
}

void ntt::thread_temp_1_fu_261_p0() {
    temp_1_fu_261_p0 =  (sc_lv<32>) (temp_1_fu_261_p00.read());
}

void ntt::thread_temp_1_fu_261_p00() {
    temp_1_fu_261_p00 = esl_zext<55,32>(p_load_reg_410.read());
}

void ntt::thread_temp_1_fu_261_p1() {
    temp_1_fu_261_p1 =  (sc_lv<23>) (tmp_6_cast_reg_382.read());
}

void ntt::thread_temp_1_fu_261_p2() {
    temp_1_fu_261_p2 = (!temp_1_fu_261_p0.read().is_01() || !temp_1_fu_261_p1.read().is_01())? sc_lv<55>(): sc_biguint<32>(temp_1_fu_261_p0.read()) * sc_biguint<23>(temp_1_fu_261_p1.read());
}

void ntt::thread_temp_fu_270_p2() {
    temp_fu_270_p2 = (!ap_const_lv32_FC7FDFFF.is_01() || !tmp_18_reg_420.read().is_01())? sc_lv<32>(): sc_bigint<32>(ap_const_lv32_FC7FDFFF) * sc_bigint<32>(tmp_18_reg_420.read());
}

void ntt::thread_tmp_10_fu_315_p2() {
    tmp_10_fu_315_p2 = (!p_q0.read().is_01() || !tmp_11_cast_fu_311_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_q0.read()) + sc_biguint<32>(tmp_11_cast_fu_311_p1.read()));
}

void ntt::thread_tmp_11_cast_fu_311_p1() {
    tmp_11_cast_fu_311_p1 = esl_zext<32,24>(tmp_7_fu_306_p2.read());
}

void ntt::thread_tmp_11_fu_325_p2() {
    tmp_11_fu_325_p2 = (!p_q0.read().is_01() || !t_3_fu_322_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_q0.read()) + sc_biguint<32>(t_3_fu_322_p1.read()));
}

void ntt::thread_tmp_12_fu_250_p2() {
    tmp_12_fu_250_p2 = (!len_cast_cast4_reg_339.read().is_01() || !start_cast_reg_377.read().is_01())? sc_lv<31>(): (sc_biguint<31>(len_cast_cast4_reg_339.read()) + sc_biguint<31>(start_cast_reg_377.read()));
}

void ntt::thread_tmp_13_fu_200_p1() {
    tmp_13_fu_200_p1 = j_reg_109.read().range(30-1, 0);
}

void ntt::thread_tmp_15_fu_204_p1() {
    tmp_15_fu_204_p1 = tmp_4_fu_189_p2.read().range(30-1, 0);
}

void ntt::thread_tmp_17_fu_170_p4() {
    tmp_17_fu_170_p4 = len_reg_97.read().range(28, 1);
}

void ntt::thread_tmp_18_fu_266_p1() {
    tmp_18_fu_266_p1 = temp_1_fu_261_p2.read().range(32-1, 0);
}

void ntt::thread_tmp_1_fu_146_p4() {
    tmp_1_fu_146_p4 = j_reg_109.read().range(30, 8);
}

void ntt::thread_tmp_3_fu_165_p1() {
    tmp_3_fu_165_p1 = esl_zext<64,32>(k_fu_60.read());
}

void ntt::thread_tmp_4_fu_189_p2() {
    tmp_4_fu_189_p2 = (!len_cast_cast4_reg_339.read().is_01() || !j_reg_109.read().is_01())? sc_lv<31>(): (sc_biguint<31>(len_cast_cast4_reg_339.read()) + sc_biguint<31>(j_reg_109.read()));
}

void ntt::thread_tmp_5_fu_194_p2() {
    tmp_5_fu_194_p2 = (!j_reg_109.read().is_01() || !tmp_4_fu_189_p2.read().is_01())? sc_lv<1>(): (sc_biguint<31>(j_reg_109.read()) > sc_biguint<31>(tmp_4_fu_189_p2.read()));
}

void ntt::thread_tmp_6_cast_fu_220_p1() {
    tmp_6_cast_fu_220_p1 = esl_zext<55,23>(zetas_q0.read());
}

void ntt::thread_tmp_6_fu_239_p1() {
    tmp_6_fu_239_p1 = esl_zext<64,31>(j1_reg_121.read());
}

void ntt::thread_tmp_7_fu_306_p2() {
    tmp_7_fu_306_p2 = (!ap_const_lv24_FFC002.is_01() || !tmp_14_reg_435.read().is_01())? sc_lv<24>(): (sc_bigint<24>(ap_const_lv24_FFC002) - sc_biguint<24>(tmp_14_reg_435.read()));
}

void ntt::thread_tmp_8_fu_224_p2() {
    tmp_8_fu_224_p2 = (!j1_reg_121.read().is_01() || !tmp_4_reg_372.read().is_01())? sc_lv<1>(): (sc_biguint<31>(j1_reg_121.read()) < sc_biguint<31>(tmp_4_reg_372.read()));
}

void ntt::thread_tmp_9_fu_229_p2() {
    tmp_9_fu_229_p2 = (!j1_reg_121.read().is_01() || !len_cast_cast4_reg_339.read().is_01())? sc_lv<31>(): (sc_biguint<31>(j1_reg_121.read()) + sc_biguint<31>(len_cast_cast4_reg_339.read()));
}

void ntt::thread_tmp_fu_140_p2() {
    tmp_fu_140_p2 = (!len_reg_97.read().is_01() || !ap_const_lv29_0.is_01())? sc_lv<1>(): sc_lv<1>(len_reg_97.read() == ap_const_lv29_0);
}

void ntt::thread_tmp_s_fu_234_p1() {
    tmp_s_fu_234_p1 = esl_zext<64,31>(tmp_9_fu_229_p2.read());
}

void ntt::thread_zetas_address0() {
    zetas_address0 =  (sc_lv<8>) (tmp_3_fu_165_p1.read());
}

void ntt::thread_zetas_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        zetas_ce0 = ap_const_logic_1;
    } else {
        zetas_ce0 = ap_const_logic_0;
    }
}

void ntt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_140_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_fu_156_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_224_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void ntt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_address0\" :  \"" << p_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_ce0\" :  \"" << p_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_we0\" :  \"" << p_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_d0\" :  \"" << p_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_q0\" :  \"" << p_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

