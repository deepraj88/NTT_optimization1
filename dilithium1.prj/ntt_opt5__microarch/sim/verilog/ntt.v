// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ntt,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.362571,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=495,HLS_SYN_LUT=845,HLS_VERSION=2018_3}" *)

module ntt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_we0,
        p_d0,
        p_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] p_address0;
output   p_ce0;
output   p_we0;
output  [31:0] p_d0;
input  [31:0] p_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] p_address0;
reg p_ce0;
reg p_we0;
reg[31:0] p_d0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] zetas_address0;
reg    zetas_ce0;
wire   [22:0] zetas_q0;
wire   [30:0] len_cast_cast4_fu_146_p1;
reg   [30:0] len_cast_cast4_reg_427;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_fu_166_p2;
wire   [28:0] len_1_fu_190_p1;
wire   [31:0] k_1_fu_194_p2;
reg   [31:0] k_1_reg_455;
wire    ap_CS_fsm_state4;
wire   [30:0] tmp_4_fu_199_p2;
reg   [30:0] tmp_4_reg_460;
wire   [30:0] start_cast_fu_226_p1;
reg   [30:0] start_cast_reg_465;
wire   [54:0] tmp_6_cast_fu_230_p1;
reg   [54:0] tmp_6_cast_reg_470;
reg   [7:0] p_addr_reg_478;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_8_fu_234_p2;
reg   [7:0] p_addr_1_reg_483;
wire   [30:0] j_1_fu_254_p2;
reg   [30:0] j_1_reg_488;
wire   [30:0] tmp_13_fu_260_p2;
reg   [31:0] p_load_reg_498;
wire    ap_CS_fsm_state6;
wire   [54:0] a_assign_fu_271_p2;
reg   [54:0] a_assign_reg_503;
wire    ap_CS_fsm_state7;
wire   [31:0] temp_fu_276_p1;
reg   [31:0] temp_reg_508;
wire   [5:0] tmp_19_fu_280_p1;
reg   [5:0] tmp_19_reg_513;
wire   [8:0] tmp_20_fu_284_p1;
reg   [8:0] tmp_20_reg_518;
wire   [18:0] tmp_21_fu_288_p1;
reg   [18:0] tmp_21_reg_523;
wire   [31:0] temp_1_fu_324_p2;
reg   [31:0] temp_1_reg_528;
wire    ap_CS_fsm_state8;
reg  signed [24:0] tmp_7_reg_535;
wire    ap_CS_fsm_state9;
reg   [28:0] len_reg_107;
reg   [30:0] j_reg_119;
wire   [0:0] tmp_fu_150_p2;
reg   [30:0] j1_reg_131;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_3_fu_175_p1;
wire   [63:0] tmp_s_fu_244_p1;
wire   [63:0] tmp_6_fu_249_p1;
reg   [31:0] k_fu_70;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_11_fu_403_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_12_fu_413_p2;
wire   [22:0] tmp_1_fu_156_p4;
wire   [27:0] tmp_17_fu_180_p4;
wire   [0:0] tmp_5_fu_204_p2;
wire   [29:0] tmp_14_fu_210_p1;
wire   [29:0] tmp_15_fu_214_p1;
wire   [29:0] start_fu_218_p3;
wire   [30:0] tmp_9_fu_239_p2;
wire   [22:0] a_assign_fu_271_p0;
wire   [31:0] a_assign_fu_271_p1;
wire   [31:0] tmp_i_9_fu_299_p3;
wire   [31:0] sum_neg_i_fu_313_p2;
wire   [31:0] tmp_i_fu_292_p3;
wire   [31:0] sum3_neg_i_fu_318_p2;
wire   [31:0] tmp_15_i_fu_306_p3;
wire   [54:0] tmp_16_i_fu_333_p3;
wire   [44:0] tmp_17_i_fu_344_p3;
wire   [54:0] t_cast_fu_330_p1;
wire   [54:0] tmp1_fu_355_p2;
wire   [55:0] tmp_16_i_cast_fu_340_p1;
wire   [55:0] tmp1_cast_fu_360_p1;
wire   [55:0] tmp_19_i_fu_364_p2;
wire   [56:0] tmp_19_i_cast_fu_370_p1;
wire   [56:0] tmp_17_i_cast_fu_351_p1;
wire   [56:0] t_fu_374_p2;
wire  signed [25:0] t_1_cast_fu_390_p1;
wire   [25:0] tmp_10_fu_393_p2;
wire  signed [31:0] tmp_10_cast_fu_399_p1;
wire  signed [31:0] t_1_fu_410_p1;
reg   [11:0] ap_NS_fsm;
wire   [54:0] a_assign_fu_271_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

ntt_zetas #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
zetas_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zetas_address0),
    .ce0(zetas_ce0),
    .q0(zetas_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j1_reg_131 <= j_1_reg_488;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j1_reg_131 <= j_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_119 <= tmp_13_fu_260_p2;
    end else if (((tmp_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_119 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_fu_70 <= k_1_reg_455;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_fu_70 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                len_reg_107[7 : 0] <= len_1_fu_190_p1[7 : 0];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                len_reg_107[0] <= 1'b0;
        len_reg_107[1] <= 1'b0;
        len_reg_107[2] <= 1'b0;
        len_reg_107[3] <= 1'b0;
        len_reg_107[4] <= 1'b0;
        len_reg_107[5] <= 1'b0;
        len_reg_107[6] <= 1'b0;
        len_reg_107[7] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_assign_reg_503 <= a_assign_fu_271_p2;
        temp_reg_508 <= temp_fu_276_p1;
        tmp_19_reg_513 <= tmp_19_fu_280_p1;
        tmp_20_reg_518 <= tmp_20_fu_284_p1;
        tmp_21_reg_523 <= tmp_21_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_reg_488 <= j_1_fu_254_p2;
        p_addr_1_reg_483 <= tmp_6_fu_249_p1;
        p_addr_reg_478 <= tmp_s_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_1_reg_455 <= k_1_fu_194_p2;
        start_cast_reg_465[29 : 0] <= start_cast_fu_226_p1[29 : 0];
        tmp_4_reg_460 <= tmp_4_fu_199_p2;
        tmp_6_cast_reg_470[22 : 0] <= tmp_6_cast_fu_230_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        len_cast_cast4_reg_427[7 : 0] <= len_cast_cast4_fu_146_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_load_reg_498 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_1_reg_528 <= temp_1_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_7_reg_535 <= {{t_fu_374_p2[56:32]}};
    end
end

always @ (*) begin
    if (((tmp_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_address0 = p_addr_reg_478;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        p_address0 = p_addr_1_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_address0 = tmp_s_fu_244_p1;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_d0 = tmp_12_fu_413_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_d0 = tmp_11_fu_403_p2;
    end else begin
        p_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        p_we0 = 1'b1;
    end else begin
        p_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zetas_ce0 = 1'b1;
    end else begin
        zetas_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_8_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_fu_271_p0 = tmp_6_cast_reg_470;

assign a_assign_fu_271_p1 = a_assign_fu_271_p10;

assign a_assign_fu_271_p10 = p_load_reg_498;

assign a_assign_fu_271_p2 = (a_assign_fu_271_p0 * a_assign_fu_271_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_fu_166_p2 = ((tmp_1_fu_156_p4 == 23'd0) ? 1'b1 : 1'b0);

assign j_1_fu_254_p2 = (31'd1 + j1_reg_131);

assign k_1_fu_194_p2 = (32'd1 + k_fu_70);

assign len_1_fu_190_p1 = tmp_17_fu_180_p4;

assign len_cast_cast4_fu_146_p1 = len_reg_107;

assign start_cast_fu_226_p1 = start_fu_218_p3;

assign start_fu_218_p3 = ((tmp_5_fu_204_p2[0:0] === 1'b1) ? tmp_14_fu_210_p1 : tmp_15_fu_214_p1);

assign sum3_neg_i_fu_318_p2 = (sum_neg_i_fu_313_p2 - tmp_i_fu_292_p3);

assign sum_neg_i_fu_313_p2 = (tmp_i_9_fu_299_p3 - temp_reg_508);

assign t_1_cast_fu_390_p1 = tmp_7_reg_535;

assign t_1_fu_410_p1 = tmp_7_reg_535;

assign t_cast_fu_330_p1 = temp_1_reg_528;

assign t_fu_374_p2 = (tmp_19_i_cast_fu_370_p1 - tmp_17_i_cast_fu_351_p1);

assign temp_1_fu_324_p2 = (sum3_neg_i_fu_318_p2 - tmp_15_i_fu_306_p3);

assign temp_fu_276_p1 = a_assign_fu_271_p2[31:0];

assign tmp1_cast_fu_360_p1 = tmp1_fu_355_p2;

assign tmp1_fu_355_p2 = (t_cast_fu_330_p1 + a_assign_reg_503);

assign tmp_10_cast_fu_399_p1 = $signed(tmp_10_fu_393_p2);

assign tmp_10_fu_393_p2 = ($signed(26'd16760834) - $signed(t_1_cast_fu_390_p1));

assign tmp_11_fu_403_p2 = ($signed(tmp_10_cast_fu_399_p1) + $signed(p_q0));

assign tmp_12_fu_413_p2 = ($signed(t_1_fu_410_p1) + $signed(p_q0));

assign tmp_13_fu_260_p2 = (len_cast_cast4_reg_427 + start_cast_reg_465);

assign tmp_14_fu_210_p1 = j_reg_119[29:0];

assign tmp_15_fu_214_p1 = tmp_4_fu_199_p2[29:0];

assign tmp_15_i_fu_306_p3 = {{tmp_21_reg_523}, {13'd0}};

assign tmp_16_i_cast_fu_340_p1 = tmp_16_i_fu_333_p3;

assign tmp_16_i_fu_333_p3 = {{temp_1_reg_528}, {23'd0}};

assign tmp_17_fu_180_p4 = {{len_reg_107[28:1]}};

assign tmp_17_i_cast_fu_351_p1 = tmp_17_i_fu_344_p3;

assign tmp_17_i_fu_344_p3 = {{temp_1_reg_528}, {13'd0}};

assign tmp_19_fu_280_p1 = a_assign_fu_271_p2[5:0];

assign tmp_19_i_cast_fu_370_p1 = tmp_19_i_fu_364_p2;

assign tmp_19_i_fu_364_p2 = (tmp_16_i_cast_fu_340_p1 + tmp1_cast_fu_360_p1);

assign tmp_1_fu_156_p4 = {{j_reg_119[30:8]}};

assign tmp_20_fu_284_p1 = a_assign_fu_271_p2[8:0];

assign tmp_21_fu_288_p1 = a_assign_fu_271_p2[18:0];

assign tmp_3_fu_175_p1 = k_fu_70;

assign tmp_4_fu_199_p2 = (len_cast_cast4_reg_427 + j_reg_119);

assign tmp_5_fu_204_p2 = ((j_reg_119 > tmp_4_fu_199_p2) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_230_p1 = zetas_q0;

assign tmp_6_fu_249_p1 = j1_reg_131;

assign tmp_8_fu_234_p2 = ((j1_reg_131 < tmp_4_reg_460) ? 1'b1 : 1'b0);

assign tmp_9_fu_239_p2 = (len_cast_cast4_reg_427 + j1_reg_131);

assign tmp_fu_150_p2 = ((len_reg_107 == 29'd0) ? 1'b1 : 1'b0);

assign tmp_i_9_fu_299_p3 = {{tmp_20_reg_518}, {23'd0}};

assign tmp_i_fu_292_p3 = {{tmp_19_reg_513}, {26'd0}};

assign tmp_s_fu_244_p1 = tmp_9_fu_239_p2;

assign zetas_address0 = tmp_3_fu_175_p1;

always @ (posedge ap_clk) begin
    len_cast_cast4_reg_427[30:8] <= 23'b00000000000000000000000;
    start_cast_reg_465[30] <= 1'b0;
    tmp_6_cast_reg_470[54:23] <= 32'b00000000000000000000000000000000;
    len_reg_107[28:8] <= 21'b000000000000000000000;
end

endmodule //ntt
