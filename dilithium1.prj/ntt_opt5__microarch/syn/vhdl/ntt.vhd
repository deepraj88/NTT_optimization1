-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ntt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_we0 : OUT STD_LOGIC;
    p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ntt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ntt,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.362571,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=495,HLS_SYN_LUT=845,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv29_80 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv26_FFC002 : STD_LOGIC_VECTOR (25 downto 0) := "00111111111100000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zetas_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zetas_ce0 : STD_LOGIC;
    signal zetas_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal len_cast_cast4_fu_146_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal len_cast_cast4_reg_427 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_1_fu_190_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_1_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_4_fu_199_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_reg_460 : STD_LOGIC_VECTOR (30 downto 0);
    signal start_cast_fu_226_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal start_cast_reg_465 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_fu_230_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_6_cast_reg_470 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_addr_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_8_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_1_reg_483 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_254_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_488 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_260_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_load_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_assign_fu_271_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_reg_503 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal temp_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_280_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_reg_513 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_284_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_288_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_21_reg_523 : STD_LOGIC_VECTOR (18 downto 0);
    signal temp_1_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_7_reg_535 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal len_reg_107 : STD_LOGIC_VECTOR (28 downto 0);
    signal j_reg_119 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_reg_131 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_3_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_11_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_12_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_156_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_17_fu_180_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_210_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_fu_214_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal start_fu_218_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_239_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_assign_fu_271_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_assign_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_9_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_neg_i_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_neg_i_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_fu_333_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_17_i_fu_344_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal t_cast_fu_330_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp1_fu_355_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_16_i_cast_fu_340_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp1_cast_fu_360_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_19_i_fu_364_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_19_i_cast_fu_370_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_17_i_cast_fu_351_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal t_fu_374_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal t_1_cast_fu_390_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_10_fu_393_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_10_cast_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_fu_271_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component ntt_zetas IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    zetas_U : component ntt_zetas
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zetas_address0,
        ce0 => zetas_ce0,
        q0 => zetas_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j1_reg_131 <= j_1_reg_488;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j1_reg_131 <= j_reg_119;
            end if; 
        end if;
    end process;

    j_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_119 <= tmp_13_fu_260_p2;
            elsif (((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_119 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_fu_70 <= k_1_reg_455;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_fu_70 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    len_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                len_reg_107(7 downto 0) <= len_1_fu_190_p1(7 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                len_reg_107(0) <= '0';
                len_reg_107(1) <= '0';
                len_reg_107(2) <= '0';
                len_reg_107(3) <= '0';
                len_reg_107(4) <= '0';
                len_reg_107(5) <= '0';
                len_reg_107(6) <= '0';
                len_reg_107(7) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_assign_reg_503 <= a_assign_fu_271_p2;
                temp_reg_508 <= temp_fu_276_p1;
                tmp_19_reg_513 <= tmp_19_fu_280_p1;
                tmp_20_reg_518 <= tmp_20_fu_284_p1;
                tmp_21_reg_523 <= tmp_21_fu_288_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_1_reg_488 <= j_1_fu_254_p2;
                p_addr_1_reg_483 <= tmp_6_fu_249_p1(8 - 1 downto 0);
                p_addr_reg_478 <= tmp_s_fu_244_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_1_reg_455 <= k_1_fu_194_p2;
                    start_cast_reg_465(29 downto 0) <= start_cast_fu_226_p1(29 downto 0);
                tmp_4_reg_460 <= tmp_4_fu_199_p2;
                    tmp_6_cast_reg_470(22 downto 0) <= tmp_6_cast_fu_230_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    len_cast_cast4_reg_427(7 downto 0) <= len_cast_cast4_fu_146_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_load_reg_498 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_1_reg_528 <= temp_1_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_7_reg_535 <= t_fu_374_p2(56 downto 32);
            end if;
        end if;
    end process;
    len_cast_cast4_reg_427(30 downto 8) <= "00000000000000000000000";
    start_cast_reg_465(30) <= '0';
    tmp_6_cast_reg_470(54 downto 23) <= "00000000000000000000000000000000";
    len_reg_107(28 downto 8) <= "000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_fu_166_p2, ap_CS_fsm_state5, tmp_8_fu_234_p2, tmp_fu_150_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_8_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_assign_fu_271_p0 <= tmp_6_cast_reg_470(23 - 1 downto 0);
    a_assign_fu_271_p1 <= a_assign_fu_271_p10(32 - 1 downto 0);
    a_assign_fu_271_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_load_reg_498),55));
    a_assign_fu_271_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_271_p0) * unsigned(a_assign_fu_271_p1), 55));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_150_p2)
    begin
        if (((tmp_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_150_p2)
    begin
        if (((tmp_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_166_p2 <= "1" when (tmp_1_fu_156_p4 = ap_const_lv23_0) else "0";
    j_1_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j1_reg_131));
    k_1_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_fu_70));
    len_1_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_180_p4),29));
    len_cast_cast4_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_reg_107),31));

    p_address0_assign_proc : process(p_addr_reg_478, ap_CS_fsm_state5, p_addr_1_reg_483, ap_CS_fsm_state9, ap_CS_fsm_state12, tmp_s_fu_244_p1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_address0 <= p_addr_reg_478;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            p_address0 <= p_addr_1_reg_483;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address0 <= tmp_s_fu_244_p1(8 - 1 downto 0);
        else 
            p_address0 <= "XXXXXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10, tmp_11_fu_403_p2, tmp_12_fu_413_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_d0 <= tmp_12_fu_413_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_d0 <= tmp_11_fu_403_p2;
        else 
            p_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            p_we0 <= ap_const_logic_1;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_fu_218_p3),31));
    start_fu_218_p3 <= 
        tmp_14_fu_210_p1 when (tmp_5_fu_204_p2(0) = '1') else 
        tmp_15_fu_214_p1;
    sum3_neg_i_fu_318_p2 <= std_logic_vector(unsigned(sum_neg_i_fu_313_p2) - unsigned(tmp_i_fu_292_p3));
    sum_neg_i_fu_313_p2 <= std_logic_vector(unsigned(tmp_i_9_fu_299_p3) - unsigned(temp_reg_508));
        t_1_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_535),26));

        t_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_535),32));

    t_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_1_reg_528),55));
    t_fu_374_p2 <= std_logic_vector(unsigned(tmp_19_i_cast_fu_370_p1) - unsigned(tmp_17_i_cast_fu_351_p1));
    temp_1_fu_324_p2 <= std_logic_vector(unsigned(sum3_neg_i_fu_318_p2) - unsigned(tmp_15_i_fu_306_p3));
    temp_fu_276_p1 <= a_assign_fu_271_p2(32 - 1 downto 0);
    tmp1_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_355_p2),56));
    tmp1_fu_355_p2 <= std_logic_vector(unsigned(t_cast_fu_330_p1) + unsigned(a_assign_reg_503));
        tmp_10_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_393_p2),32));

    tmp_10_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv26_FFC002) - unsigned(t_1_cast_fu_390_p1));
    tmp_11_fu_403_p2 <= std_logic_vector(signed(tmp_10_cast_fu_399_p1) + signed(p_q0));
    tmp_12_fu_413_p2 <= std_logic_vector(signed(t_1_fu_410_p1) + signed(p_q0));
    tmp_13_fu_260_p2 <= std_logic_vector(unsigned(len_cast_cast4_reg_427) + unsigned(start_cast_reg_465));
    tmp_14_fu_210_p1 <= j_reg_119(30 - 1 downto 0);
    tmp_15_fu_214_p1 <= tmp_4_fu_199_p2(30 - 1 downto 0);
    tmp_15_i_fu_306_p3 <= (tmp_21_reg_523 & ap_const_lv13_0);
    tmp_16_i_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_i_fu_333_p3),56));
    tmp_16_i_fu_333_p3 <= (temp_1_reg_528 & ap_const_lv23_0);
    tmp_17_fu_180_p4 <= len_reg_107(28 downto 1);
    tmp_17_i_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_i_fu_344_p3),57));
    tmp_17_i_fu_344_p3 <= (temp_1_reg_528 & ap_const_lv13_0);
    tmp_19_fu_280_p1 <= a_assign_fu_271_p2(6 - 1 downto 0);
    tmp_19_i_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_i_fu_364_p2),57));
    tmp_19_i_fu_364_p2 <= std_logic_vector(unsigned(tmp_16_i_cast_fu_340_p1) + unsigned(tmp1_cast_fu_360_p1));
    tmp_1_fu_156_p4 <= j_reg_119(30 downto 8);
    tmp_20_fu_284_p1 <= a_assign_fu_271_p2(9 - 1 downto 0);
    tmp_21_fu_288_p1 <= a_assign_fu_271_p2(19 - 1 downto 0);
    tmp_3_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_70),64));
    tmp_4_fu_199_p2 <= std_logic_vector(unsigned(len_cast_cast4_reg_427) + unsigned(j_reg_119));
    tmp_5_fu_204_p2 <= "1" when (unsigned(j_reg_119) > unsigned(tmp_4_fu_199_p2)) else "0";
    tmp_6_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zetas_q0),55));
    tmp_6_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_131),64));
    tmp_8_fu_234_p2 <= "1" when (unsigned(j1_reg_131) < unsigned(tmp_4_reg_460)) else "0";
    tmp_9_fu_239_p2 <= std_logic_vector(unsigned(len_cast_cast4_reg_427) + unsigned(j1_reg_131));
    tmp_fu_150_p2 <= "1" when (len_reg_107 = ap_const_lv29_0) else "0";
    tmp_i_9_fu_299_p3 <= (tmp_20_reg_518 & ap_const_lv23_0);
    tmp_i_fu_292_p3 <= (tmp_19_reg_513 & ap_const_lv26_0);
    tmp_s_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_239_p2),64));
    zetas_address0 <= tmp_3_fu_175_p1(8 - 1 downto 0);

    zetas_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            zetas_ce0 <= ap_const_logic_1;
        else 
            zetas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
