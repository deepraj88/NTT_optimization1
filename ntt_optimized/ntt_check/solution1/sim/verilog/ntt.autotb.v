// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      ntt
`define AUTOTB_DUT_INST AESL_inst_ntt
`define AUTOTB_TOP      apatb_ntt_top
`define AUTOTB_LAT_RESULT_FILE "ntt.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "ntt.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_ntt_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_MEM_q0 AESL_automem_q0
`define AESL_MEM_INST_q0 mem_inst_q0
`define AESL_MEM_q1 AESL_automem_q1
`define AESL_MEM_INST_q1 mem_inst_q1
`define AESL_MEM_q2 AESL_automem_q2
`define AESL_MEM_INST_q2 mem_inst_q2
`define AESL_MEM_q3 AESL_automem_q3
`define AESL_MEM_INST_q3 mem_inst_q3
`define AESL_MEM_q4 AESL_automem_q4
`define AESL_MEM_INST_q4 mem_inst_q4
`define AESL_MEM_q5 AESL_automem_q5
`define AESL_MEM_INST_q5 mem_inst_q5
`define AESL_MEM_q6 AESL_automem_q6
`define AESL_MEM_INST_q6 mem_inst_q6
`define AESL_MEM_q7 AESL_automem_q7
`define AESL_MEM_INST_q7 mem_inst_q7
`define AESL_MEM_zetas AESL_automem_zetas
`define AESL_MEM_INST_zetas mem_inst_zetas
`define AUTOTB_TVIN_q0  "../tv/cdatafile/c.ntt.autotvin_q0.dat"
`define AUTOTB_TVIN_q1  "../tv/cdatafile/c.ntt.autotvin_q1.dat"
`define AUTOTB_TVIN_q2  "../tv/cdatafile/c.ntt.autotvin_q2.dat"
`define AUTOTB_TVIN_q3  "../tv/cdatafile/c.ntt.autotvin_q3.dat"
`define AUTOTB_TVIN_q4  "../tv/cdatafile/c.ntt.autotvin_q4.dat"
`define AUTOTB_TVIN_q5  "../tv/cdatafile/c.ntt.autotvin_q5.dat"
`define AUTOTB_TVIN_q6  "../tv/cdatafile/c.ntt.autotvin_q6.dat"
`define AUTOTB_TVIN_q7  "../tv/cdatafile/c.ntt.autotvin_q7.dat"
`define AUTOTB_TVIN_zetas  "../tv/cdatafile/c.ntt.autotvin_zetas.dat"
`define AUTOTB_TVIN_q0_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q0.dat"
`define AUTOTB_TVIN_q1_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q1.dat"
`define AUTOTB_TVIN_q2_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q2.dat"
`define AUTOTB_TVIN_q3_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q3.dat"
`define AUTOTB_TVIN_q4_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q4.dat"
`define AUTOTB_TVIN_q5_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q5.dat"
`define AUTOTB_TVIN_q6_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q6.dat"
`define AUTOTB_TVIN_q7_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_q7.dat"
`define AUTOTB_TVIN_zetas_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvin_zetas.dat"
`define AUTOTB_TVOUT_q0  "../tv/cdatafile/c.ntt.autotvout_q0.dat"
`define AUTOTB_TVOUT_q1  "../tv/cdatafile/c.ntt.autotvout_q1.dat"
`define AUTOTB_TVOUT_q2  "../tv/cdatafile/c.ntt.autotvout_q2.dat"
`define AUTOTB_TVOUT_q3  "../tv/cdatafile/c.ntt.autotvout_q3.dat"
`define AUTOTB_TVOUT_q4  "../tv/cdatafile/c.ntt.autotvout_q4.dat"
`define AUTOTB_TVOUT_q5  "../tv/cdatafile/c.ntt.autotvout_q5.dat"
`define AUTOTB_TVOUT_q6  "../tv/cdatafile/c.ntt.autotvout_q6.dat"
`define AUTOTB_TVOUT_q7  "../tv/cdatafile/c.ntt.autotvout_q7.dat"
`define AUTOTB_TVOUT_q0_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q0.dat"
`define AUTOTB_TVOUT_q1_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q1.dat"
`define AUTOTB_TVOUT_q2_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q2.dat"
`define AUTOTB_TVOUT_q3_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q3.dat"
`define AUTOTB_TVOUT_q4_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q4.dat"
`define AUTOTB_TVOUT_q5_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q5.dat"
`define AUTOTB_TVOUT_q6_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q6.dat"
`define AUTOTB_TVOUT_q7_out_wrapc  "../tv/rtldatafile/rtl.ntt.autotvout_q7.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 1;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 719;
parameter LENGTH_q0 = 32;
parameter LENGTH_q1 = 32;
parameter LENGTH_q2 = 32;
parameter LENGTH_q3 = 32;
parameter LENGTH_q4 = 32;
parameter LENGTH_q5 = 32;
parameter LENGTH_q6 = 32;
parameter LENGTH_q7 = 32;
parameter LENGTH_zetas = 256;

task read_token;
    input integer fp;
    output reg [135 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [4 : 0] q0_address0;
wire  q0_ce0;
wire  q0_we0;
wire [31 : 0] q0_d0;
wire [31 : 0] q0_q0;
wire [4 : 0] q0_address1;
wire  q0_ce1;
wire  q0_we1;
wire [31 : 0] q0_d1;
wire [31 : 0] q0_q1;
wire [4 : 0] q1_address0;
wire  q1_ce0;
wire  q1_we0;
wire [31 : 0] q1_d0;
wire [31 : 0] q1_q0;
wire [4 : 0] q1_address1;
wire  q1_ce1;
wire  q1_we1;
wire [31 : 0] q1_d1;
wire [31 : 0] q1_q1;
wire [4 : 0] q2_address0;
wire  q2_ce0;
wire  q2_we0;
wire [31 : 0] q2_d0;
wire [31 : 0] q2_q0;
wire [4 : 0] q2_address1;
wire  q2_ce1;
wire  q2_we1;
wire [31 : 0] q2_d1;
wire [31 : 0] q2_q1;
wire [4 : 0] q3_address0;
wire  q3_ce0;
wire  q3_we0;
wire [31 : 0] q3_d0;
wire [31 : 0] q3_q0;
wire [4 : 0] q3_address1;
wire  q3_ce1;
wire  q3_we1;
wire [31 : 0] q3_d1;
wire [31 : 0] q3_q1;
wire [4 : 0] q4_address0;
wire  q4_ce0;
wire  q4_we0;
wire [31 : 0] q4_d0;
wire [31 : 0] q4_q0;
wire [4 : 0] q4_address1;
wire  q4_ce1;
wire  q4_we1;
wire [31 : 0] q4_d1;
wire [31 : 0] q4_q1;
wire [4 : 0] q5_address0;
wire  q5_ce0;
wire  q5_we0;
wire [31 : 0] q5_d0;
wire [31 : 0] q5_q0;
wire [4 : 0] q5_address1;
wire  q5_ce1;
wire  q5_we1;
wire [31 : 0] q5_d1;
wire [31 : 0] q5_q1;
wire [4 : 0] q6_address0;
wire  q6_ce0;
wire  q6_we0;
wire [31 : 0] q6_d0;
wire [31 : 0] q6_q0;
wire [4 : 0] q6_address1;
wire  q6_ce1;
wire  q6_we1;
wire [31 : 0] q6_d1;
wire [31 : 0] q6_q1;
wire [4 : 0] q7_address0;
wire  q7_ce0;
wire  q7_we0;
wire [31 : 0] q7_d0;
wire [31 : 0] q7_q0;
wire [4 : 0] q7_address1;
wire  q7_ce1;
wire  q7_we1;
wire [31 : 0] q7_d1;
wire [31 : 0] q7_q1;
wire [7 : 0] zetas_address0;
wire  zetas_ce0;
wire [31 : 0] zetas_q0;
wire [7 : 0] zetas_address1;
wire  zetas_ce1;
wire [31 : 0] zetas_q1;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

wire ap_clk;
wire ap_rst;
wire ap_rst_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .q0_address0(q0_address0),
    .q0_ce0(q0_ce0),
    .q0_we0(q0_we0),
    .q0_d0(q0_d0),
    .q0_q0(q0_q0),
    .q0_address1(q0_address1),
    .q0_ce1(q0_ce1),
    .q0_we1(q0_we1),
    .q0_d1(q0_d1),
    .q0_q1(q0_q1),
    .q1_address0(q1_address0),
    .q1_ce0(q1_ce0),
    .q1_we0(q1_we0),
    .q1_d0(q1_d0),
    .q1_q0(q1_q0),
    .q1_address1(q1_address1),
    .q1_ce1(q1_ce1),
    .q1_we1(q1_we1),
    .q1_d1(q1_d1),
    .q1_q1(q1_q1),
    .q2_address0(q2_address0),
    .q2_ce0(q2_ce0),
    .q2_we0(q2_we0),
    .q2_d0(q2_d0),
    .q2_q0(q2_q0),
    .q2_address1(q2_address1),
    .q2_ce1(q2_ce1),
    .q2_we1(q2_we1),
    .q2_d1(q2_d1),
    .q2_q1(q2_q1),
    .q3_address0(q3_address0),
    .q3_ce0(q3_ce0),
    .q3_we0(q3_we0),
    .q3_d0(q3_d0),
    .q3_q0(q3_q0),
    .q3_address1(q3_address1),
    .q3_ce1(q3_ce1),
    .q3_we1(q3_we1),
    .q3_d1(q3_d1),
    .q3_q1(q3_q1),
    .q4_address0(q4_address0),
    .q4_ce0(q4_ce0),
    .q4_we0(q4_we0),
    .q4_d0(q4_d0),
    .q4_q0(q4_q0),
    .q4_address1(q4_address1),
    .q4_ce1(q4_ce1),
    .q4_we1(q4_we1),
    .q4_d1(q4_d1),
    .q4_q1(q4_q1),
    .q5_address0(q5_address0),
    .q5_ce0(q5_ce0),
    .q5_we0(q5_we0),
    .q5_d0(q5_d0),
    .q5_q0(q5_q0),
    .q5_address1(q5_address1),
    .q5_ce1(q5_ce1),
    .q5_we1(q5_we1),
    .q5_d1(q5_d1),
    .q5_q1(q5_q1),
    .q6_address0(q6_address0),
    .q6_ce0(q6_ce0),
    .q6_we0(q6_we0),
    .q6_d0(q6_d0),
    .q6_q0(q6_q0),
    .q6_address1(q6_address1),
    .q6_ce1(q6_ce1),
    .q6_we1(q6_we1),
    .q6_d1(q6_d1),
    .q6_q1(q6_q1),
    .q7_address0(q7_address0),
    .q7_ce0(q7_ce0),
    .q7_we0(q7_we0),
    .q7_d0(q7_d0),
    .q7_q0(q7_q0),
    .q7_address1(q7_address1),
    .q7_ce1(q7_ce1),
    .q7_we1(q7_we1),
    .q7_d1(q7_d1),
    .q7_q1(q7_q1),
    .zetas_address0(zetas_address0),
    .zetas_ce0(zetas_ce0),
    .zetas_q0(zetas_q0),
    .zetas_address1(zetas_address1),
    .zetas_ce1(zetas_ce1),
    .zetas_q1(zetas_q1));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end
//------------------------arrayq0 Instantiation--------------

// The input and output of arrayq0
wire    arrayq0_ce0, arrayq0_ce1;
wire    arrayq0_we0, arrayq0_we1;
wire    [4 : 0]    arrayq0_address0, arrayq0_address1;
wire    [31 : 0]    arrayq0_din0, arrayq0_din1;
wire    [31 : 0]    arrayq0_dout0, arrayq0_dout1;
wire    arrayq0_ready;
wire    arrayq0_done;

`AESL_MEM_q0 `AESL_MEM_INST_q0(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq0_ce0),
    .we0        (arrayq0_we0),
    .address0   (arrayq0_address0),
    .din0       (arrayq0_din0),
    .dout0      (arrayq0_dout0),
    .ce1        (arrayq0_ce1),
    .we1        (arrayq0_we1),
    .address1   (arrayq0_address1),
    .din1       (arrayq0_din1),
    .dout1      (arrayq0_dout1),
    .ready      (arrayq0_ready),
    .done    (arrayq0_done)
);

// Assignment between dut and arrayq0
assign arrayq0_address0 = q0_address0;
assign arrayq0_ce0 = q0_ce0;
assign q0_q0 = arrayq0_dout0;
assign arrayq0_we0 = q0_we0;
assign arrayq0_din0 = q0_d0;
assign arrayq0_address1 = q0_address1;
assign arrayq0_ce1 = q0_ce1;
assign q0_q1 = arrayq0_dout1;
assign arrayq0_we1 = q0_we1;
assign arrayq0_din1 = q0_d1;
assign arrayq0_ready= ready;
assign arrayq0_done = interface_done;


//------------------------arrayq1 Instantiation--------------

// The input and output of arrayq1
wire    arrayq1_ce0, arrayq1_ce1;
wire    arrayq1_we0, arrayq1_we1;
wire    [4 : 0]    arrayq1_address0, arrayq1_address1;
wire    [31 : 0]    arrayq1_din0, arrayq1_din1;
wire    [31 : 0]    arrayq1_dout0, arrayq1_dout1;
wire    arrayq1_ready;
wire    arrayq1_done;

`AESL_MEM_q1 `AESL_MEM_INST_q1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq1_ce0),
    .we0        (arrayq1_we0),
    .address0   (arrayq1_address0),
    .din0       (arrayq1_din0),
    .dout0      (arrayq1_dout0),
    .ce1        (arrayq1_ce1),
    .we1        (arrayq1_we1),
    .address1   (arrayq1_address1),
    .din1       (arrayq1_din1),
    .dout1      (arrayq1_dout1),
    .ready      (arrayq1_ready),
    .done    (arrayq1_done)
);

// Assignment between dut and arrayq1
assign arrayq1_address0 = q1_address0;
assign arrayq1_ce0 = q1_ce0;
assign q1_q0 = arrayq1_dout0;
assign arrayq1_we0 = q1_we0;
assign arrayq1_din0 = q1_d0;
assign arrayq1_address1 = q1_address1;
assign arrayq1_ce1 = q1_ce1;
assign q1_q1 = arrayq1_dout1;
assign arrayq1_we1 = q1_we1;
assign arrayq1_din1 = q1_d1;
assign arrayq1_ready= ready;
assign arrayq1_done = interface_done;


//------------------------arrayq2 Instantiation--------------

// The input and output of arrayq2
wire    arrayq2_ce0, arrayq2_ce1;
wire    arrayq2_we0, arrayq2_we1;
wire    [4 : 0]    arrayq2_address0, arrayq2_address1;
wire    [31 : 0]    arrayq2_din0, arrayq2_din1;
wire    [31 : 0]    arrayq2_dout0, arrayq2_dout1;
wire    arrayq2_ready;
wire    arrayq2_done;

`AESL_MEM_q2 `AESL_MEM_INST_q2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq2_ce0),
    .we0        (arrayq2_we0),
    .address0   (arrayq2_address0),
    .din0       (arrayq2_din0),
    .dout0      (arrayq2_dout0),
    .ce1        (arrayq2_ce1),
    .we1        (arrayq2_we1),
    .address1   (arrayq2_address1),
    .din1       (arrayq2_din1),
    .dout1      (arrayq2_dout1),
    .ready      (arrayq2_ready),
    .done    (arrayq2_done)
);

// Assignment between dut and arrayq2
assign arrayq2_address0 = q2_address0;
assign arrayq2_ce0 = q2_ce0;
assign q2_q0 = arrayq2_dout0;
assign arrayq2_we0 = q2_we0;
assign arrayq2_din0 = q2_d0;
assign arrayq2_address1 = q2_address1;
assign arrayq2_ce1 = q2_ce1;
assign q2_q1 = arrayq2_dout1;
assign arrayq2_we1 = q2_we1;
assign arrayq2_din1 = q2_d1;
assign arrayq2_ready= ready;
assign arrayq2_done = interface_done;


//------------------------arrayq3 Instantiation--------------

// The input and output of arrayq3
wire    arrayq3_ce0, arrayq3_ce1;
wire    arrayq3_we0, arrayq3_we1;
wire    [4 : 0]    arrayq3_address0, arrayq3_address1;
wire    [31 : 0]    arrayq3_din0, arrayq3_din1;
wire    [31 : 0]    arrayq3_dout0, arrayq3_dout1;
wire    arrayq3_ready;
wire    arrayq3_done;

`AESL_MEM_q3 `AESL_MEM_INST_q3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq3_ce0),
    .we0        (arrayq3_we0),
    .address0   (arrayq3_address0),
    .din0       (arrayq3_din0),
    .dout0      (arrayq3_dout0),
    .ce1        (arrayq3_ce1),
    .we1        (arrayq3_we1),
    .address1   (arrayq3_address1),
    .din1       (arrayq3_din1),
    .dout1      (arrayq3_dout1),
    .ready      (arrayq3_ready),
    .done    (arrayq3_done)
);

// Assignment between dut and arrayq3
assign arrayq3_address0 = q3_address0;
assign arrayq3_ce0 = q3_ce0;
assign q3_q0 = arrayq3_dout0;
assign arrayq3_we0 = q3_we0;
assign arrayq3_din0 = q3_d0;
assign arrayq3_address1 = q3_address1;
assign arrayq3_ce1 = q3_ce1;
assign q3_q1 = arrayq3_dout1;
assign arrayq3_we1 = q3_we1;
assign arrayq3_din1 = q3_d1;
assign arrayq3_ready= ready;
assign arrayq3_done = interface_done;


//------------------------arrayq4 Instantiation--------------

// The input and output of arrayq4
wire    arrayq4_ce0, arrayq4_ce1;
wire    arrayq4_we0, arrayq4_we1;
wire    [4 : 0]    arrayq4_address0, arrayq4_address1;
wire    [31 : 0]    arrayq4_din0, arrayq4_din1;
wire    [31 : 0]    arrayq4_dout0, arrayq4_dout1;
wire    arrayq4_ready;
wire    arrayq4_done;

`AESL_MEM_q4 `AESL_MEM_INST_q4(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq4_ce0),
    .we0        (arrayq4_we0),
    .address0   (arrayq4_address0),
    .din0       (arrayq4_din0),
    .dout0      (arrayq4_dout0),
    .ce1        (arrayq4_ce1),
    .we1        (arrayq4_we1),
    .address1   (arrayq4_address1),
    .din1       (arrayq4_din1),
    .dout1      (arrayq4_dout1),
    .ready      (arrayq4_ready),
    .done    (arrayq4_done)
);

// Assignment between dut and arrayq4
assign arrayq4_address0 = q4_address0;
assign arrayq4_ce0 = q4_ce0;
assign q4_q0 = arrayq4_dout0;
assign arrayq4_we0 = q4_we0;
assign arrayq4_din0 = q4_d0;
assign arrayq4_address1 = q4_address1;
assign arrayq4_ce1 = q4_ce1;
assign q4_q1 = arrayq4_dout1;
assign arrayq4_we1 = q4_we1;
assign arrayq4_din1 = q4_d1;
assign arrayq4_ready= ready;
assign arrayq4_done = interface_done;


//------------------------arrayq5 Instantiation--------------

// The input and output of arrayq5
wire    arrayq5_ce0, arrayq5_ce1;
wire    arrayq5_we0, arrayq5_we1;
wire    [4 : 0]    arrayq5_address0, arrayq5_address1;
wire    [31 : 0]    arrayq5_din0, arrayq5_din1;
wire    [31 : 0]    arrayq5_dout0, arrayq5_dout1;
wire    arrayq5_ready;
wire    arrayq5_done;

`AESL_MEM_q5 `AESL_MEM_INST_q5(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq5_ce0),
    .we0        (arrayq5_we0),
    .address0   (arrayq5_address0),
    .din0       (arrayq5_din0),
    .dout0      (arrayq5_dout0),
    .ce1        (arrayq5_ce1),
    .we1        (arrayq5_we1),
    .address1   (arrayq5_address1),
    .din1       (arrayq5_din1),
    .dout1      (arrayq5_dout1),
    .ready      (arrayq5_ready),
    .done    (arrayq5_done)
);

// Assignment between dut and arrayq5
assign arrayq5_address0 = q5_address0;
assign arrayq5_ce0 = q5_ce0;
assign q5_q0 = arrayq5_dout0;
assign arrayq5_we0 = q5_we0;
assign arrayq5_din0 = q5_d0;
assign arrayq5_address1 = q5_address1;
assign arrayq5_ce1 = q5_ce1;
assign q5_q1 = arrayq5_dout1;
assign arrayq5_we1 = q5_we1;
assign arrayq5_din1 = q5_d1;
assign arrayq5_ready= ready;
assign arrayq5_done = interface_done;


//------------------------arrayq6 Instantiation--------------

// The input and output of arrayq6
wire    arrayq6_ce0, arrayq6_ce1;
wire    arrayq6_we0, arrayq6_we1;
wire    [4 : 0]    arrayq6_address0, arrayq6_address1;
wire    [31 : 0]    arrayq6_din0, arrayq6_din1;
wire    [31 : 0]    arrayq6_dout0, arrayq6_dout1;
wire    arrayq6_ready;
wire    arrayq6_done;

`AESL_MEM_q6 `AESL_MEM_INST_q6(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq6_ce0),
    .we0        (arrayq6_we0),
    .address0   (arrayq6_address0),
    .din0       (arrayq6_din0),
    .dout0      (arrayq6_dout0),
    .ce1        (arrayq6_ce1),
    .we1        (arrayq6_we1),
    .address1   (arrayq6_address1),
    .din1       (arrayq6_din1),
    .dout1      (arrayq6_dout1),
    .ready      (arrayq6_ready),
    .done    (arrayq6_done)
);

// Assignment between dut and arrayq6
assign arrayq6_address0 = q6_address0;
assign arrayq6_ce0 = q6_ce0;
assign q6_q0 = arrayq6_dout0;
assign arrayq6_we0 = q6_we0;
assign arrayq6_din0 = q6_d0;
assign arrayq6_address1 = q6_address1;
assign arrayq6_ce1 = q6_ce1;
assign q6_q1 = arrayq6_dout1;
assign arrayq6_we1 = q6_we1;
assign arrayq6_din1 = q6_d1;
assign arrayq6_ready= ready;
assign arrayq6_done = interface_done;


//------------------------arrayq7 Instantiation--------------

// The input and output of arrayq7
wire    arrayq7_ce0, arrayq7_ce1;
wire    arrayq7_we0, arrayq7_we1;
wire    [4 : 0]    arrayq7_address0, arrayq7_address1;
wire    [31 : 0]    arrayq7_din0, arrayq7_din1;
wire    [31 : 0]    arrayq7_dout0, arrayq7_dout1;
wire    arrayq7_ready;
wire    arrayq7_done;

`AESL_MEM_q7 `AESL_MEM_INST_q7(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayq7_ce0),
    .we0        (arrayq7_we0),
    .address0   (arrayq7_address0),
    .din0       (arrayq7_din0),
    .dout0      (arrayq7_dout0),
    .ce1        (arrayq7_ce1),
    .we1        (arrayq7_we1),
    .address1   (arrayq7_address1),
    .din1       (arrayq7_din1),
    .dout1      (arrayq7_dout1),
    .ready      (arrayq7_ready),
    .done    (arrayq7_done)
);

// Assignment between dut and arrayq7
assign arrayq7_address0 = q7_address0;
assign arrayq7_ce0 = q7_ce0;
assign q7_q0 = arrayq7_dout0;
assign arrayq7_we0 = q7_we0;
assign arrayq7_din0 = q7_d0;
assign arrayq7_address1 = q7_address1;
assign arrayq7_ce1 = q7_ce1;
assign q7_q1 = arrayq7_dout1;
assign arrayq7_we1 = q7_we1;
assign arrayq7_din1 = q7_d1;
assign arrayq7_ready= ready;
assign arrayq7_done = interface_done;


//------------------------arrayzetas Instantiation--------------

// The input and output of arrayzetas
wire    arrayzetas_ce0, arrayzetas_ce1;
wire    arrayzetas_we0, arrayzetas_we1;
wire    [7 : 0]    arrayzetas_address0, arrayzetas_address1;
wire    [31 : 0]    arrayzetas_din0, arrayzetas_din1;
wire    [31 : 0]    arrayzetas_dout0, arrayzetas_dout1;
wire    arrayzetas_ready;
wire    arrayzetas_done;

`AESL_MEM_zetas `AESL_MEM_INST_zetas(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayzetas_ce0),
    .we0        (arrayzetas_we0),
    .address0   (arrayzetas_address0),
    .din0       (arrayzetas_din0),
    .dout0      (arrayzetas_dout0),
    .ce1        (arrayzetas_ce1),
    .we1        (arrayzetas_we1),
    .address1   (arrayzetas_address1),
    .din1       (arrayzetas_din1),
    .dout1      (arrayzetas_dout1),
    .ready      (arrayzetas_ready),
    .done    (arrayzetas_done)
);

// Assignment between dut and arrayzetas
assign arrayzetas_address0 = zetas_address0;
assign arrayzetas_ce0 = zetas_ce0;
assign zetas_q0 = arrayzetas_dout0;
assign arrayzetas_we0 = 0;
assign arrayzetas_din0 = 0;
assign arrayzetas_address1 = zetas_address1;
assign arrayzetas_ce1 = zetas_ce1;
assign zetas_q1 = arrayzetas_dout1;
assign arrayzetas_we1 = 0;
assign arrayzetas_din1 = 0;
assign arrayzetas_ready=    ready;
assign arrayzetas_done = 0;


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_q0;
reg [31:0] size_q0;
reg [31:0] size_q0_backup;
reg end_q1;
reg [31:0] size_q1;
reg [31:0] size_q1_backup;
reg end_q2;
reg [31:0] size_q2;
reg [31:0] size_q2_backup;
reg end_q3;
reg [31:0] size_q3;
reg [31:0] size_q3_backup;
reg end_q4;
reg [31:0] size_q4;
reg [31:0] size_q4_backup;
reg end_q5;
reg [31:0] size_q5;
reg [31:0] size_q5_backup;
reg end_q6;
reg [31:0] size_q6;
reg [31:0] size_q6_backup;
reg end_q7;
reg [31:0] size_q7;
reg [31:0] size_q7_backup;
reg end_zetas;
reg [31:0] size_zetas;
reg [31:0] size_zetas_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer proc_rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 0);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_q0;

initial begin : dump_tvout_runtime_sign_q0
    integer fp;
    dump_tvout_finish_q0 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q0_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q0_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q0 = 1;
end


reg dump_tvout_finish_q1;

initial begin : dump_tvout_runtime_sign_q1
    integer fp;
    dump_tvout_finish_q1 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q1_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q1_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q1 = 1;
end


reg dump_tvout_finish_q2;

initial begin : dump_tvout_runtime_sign_q2
    integer fp;
    dump_tvout_finish_q2 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q2_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q2_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q2 = 1;
end


reg dump_tvout_finish_q3;

initial begin : dump_tvout_runtime_sign_q3
    integer fp;
    dump_tvout_finish_q3 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q3_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q3_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q3 = 1;
end


reg dump_tvout_finish_q4;

initial begin : dump_tvout_runtime_sign_q4
    integer fp;
    dump_tvout_finish_q4 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q4_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q4_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q4 = 1;
end


reg dump_tvout_finish_q5;

initial begin : dump_tvout_runtime_sign_q5
    integer fp;
    dump_tvout_finish_q5 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q5_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q5_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q5 = 1;
end


reg dump_tvout_finish_q6;

initial begin : dump_tvout_runtime_sign_q6
    integer fp;
    dump_tvout_finish_q6 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q6_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q6_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q6 = 1;
end


reg dump_tvout_finish_q7;

initial begin : dump_tvout_runtime_sign_q7
    integer fp;
    dump_tvout_finish_q7 = 0;
    fp = $fopen(`AUTOTB_TVOUT_q7_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_q7_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_q7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_q7 = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;
reg AESL_start_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
    AESL_start_p1 <= AESL_start;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] ready_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] ap_ready_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    ap_ready_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if ((AESL_start && AESL_ready_p1)||(AESL_start && ~AESL_start_p1)) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (ap_ready_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start_p1 && AESL_ready_p1) begin
                ready_timestamp[ap_ready_cnt] = clk_cnt;
                ap_ready_cnt = ap_ready_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else if(finish_cnt > 0) begin
            intra_progress = LATENCY_ESTIMATION;
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = finish_timestamp[i] - start_timestamp[i]+1;
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
