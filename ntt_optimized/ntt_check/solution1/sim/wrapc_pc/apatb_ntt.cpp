// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "q0"
#define AUTOTB_TVIN_q0  "../tv/cdatafile/c.ntt.autotvin_q0.dat"
#define AUTOTB_TVOUT_q0  "../tv/cdatafile/c.ntt.autotvout_q0.dat"
// wrapc file define: "q1"
#define AUTOTB_TVIN_q1  "../tv/cdatafile/c.ntt.autotvin_q1.dat"
#define AUTOTB_TVOUT_q1  "../tv/cdatafile/c.ntt.autotvout_q1.dat"
// wrapc file define: "q2"
#define AUTOTB_TVIN_q2  "../tv/cdatafile/c.ntt.autotvin_q2.dat"
#define AUTOTB_TVOUT_q2  "../tv/cdatafile/c.ntt.autotvout_q2.dat"
// wrapc file define: "q3"
#define AUTOTB_TVIN_q3  "../tv/cdatafile/c.ntt.autotvin_q3.dat"
#define AUTOTB_TVOUT_q3  "../tv/cdatafile/c.ntt.autotvout_q3.dat"
// wrapc file define: "q4"
#define AUTOTB_TVIN_q4  "../tv/cdatafile/c.ntt.autotvin_q4.dat"
#define AUTOTB_TVOUT_q4  "../tv/cdatafile/c.ntt.autotvout_q4.dat"
// wrapc file define: "q5"
#define AUTOTB_TVIN_q5  "../tv/cdatafile/c.ntt.autotvin_q5.dat"
#define AUTOTB_TVOUT_q5  "../tv/cdatafile/c.ntt.autotvout_q5.dat"
// wrapc file define: "q6"
#define AUTOTB_TVIN_q6  "../tv/cdatafile/c.ntt.autotvin_q6.dat"
#define AUTOTB_TVOUT_q6  "../tv/cdatafile/c.ntt.autotvout_q6.dat"
// wrapc file define: "q7"
#define AUTOTB_TVIN_q7  "../tv/cdatafile/c.ntt.autotvin_q7.dat"
#define AUTOTB_TVOUT_q7  "../tv/cdatafile/c.ntt.autotvout_q7.dat"
// wrapc file define: "zetas"
#define AUTOTB_TVIN_zetas  "../tv/cdatafile/c.ntt.autotvin_zetas.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "q0"
#define AUTOTB_TVOUT_PC_q0  "../tv/rtldatafile/rtl.ntt.autotvout_q0.dat"
// tvout file define: "q1"
#define AUTOTB_TVOUT_PC_q1  "../tv/rtldatafile/rtl.ntt.autotvout_q1.dat"
// tvout file define: "q2"
#define AUTOTB_TVOUT_PC_q2  "../tv/rtldatafile/rtl.ntt.autotvout_q2.dat"
// tvout file define: "q3"
#define AUTOTB_TVOUT_PC_q3  "../tv/rtldatafile/rtl.ntt.autotvout_q3.dat"
// tvout file define: "q4"
#define AUTOTB_TVOUT_PC_q4  "../tv/rtldatafile/rtl.ntt.autotvout_q4.dat"
// tvout file define: "q5"
#define AUTOTB_TVOUT_PC_q5  "../tv/rtldatafile/rtl.ntt.autotvout_q5.dat"
// tvout file define: "q6"
#define AUTOTB_TVOUT_PC_q6  "../tv/rtldatafile/rtl.ntt.autotvout_q6.dat"
// tvout file define: "q7"
#define AUTOTB_TVOUT_PC_q7  "../tv/rtldatafile/rtl.ntt.autotvout_q7.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			q0_depth = 0;
			q1_depth = 0;
			q2_depth = 0;
			q3_depth = 0;
			q4_depth = 0;
			q5_depth = 0;
			q6_depth = 0;
			q7_depth = 0;
			zetas_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{q0 " << q0_depth << "}\n";
			total_list << "{q1 " << q1_depth << "}\n";
			total_list << "{q2 " << q2_depth << "}\n";
			total_list << "{q3 " << q3_depth << "}\n";
			total_list << "{q4 " << q4_depth << "}\n";
			total_list << "{q5 " << q5_depth << "}\n";
			total_list << "{q6 " << q6_depth << "}\n";
			total_list << "{q7 " << q7_depth << "}\n";
			total_list << "{zetas " << zetas_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int q0_depth;
		int q1_depth;
		int q2_depth;
		int q3_depth;
		int q4_depth;
		int q5_depth;
		int q6_depth;
		int q7_depth;
		int zetas_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void ntt (
unsigned int q0[32],
unsigned int q1[32],
unsigned int q2[32],
unsigned int q3[32],
unsigned int q4[32],
unsigned int q5[32],
unsigned int q6[32],
unsigned int q7[32],
unsigned int zetas[256]);

void AESL_WRAP_ntt (
unsigned int q0[32],
unsigned int q1[32],
unsigned int q2[32],
unsigned int q3[32],
unsigned int q4[32],
unsigned int q5[32],
unsigned int q6[32],
unsigned int q7[32],
unsigned int zetas[256])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "q0"
		aesl_fh.read(AUTOTB_TVOUT_PC_q0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q0, AESL_token); // data

			sc_bv<32> *q0_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q0
				{
					// bitslice(31, 0)
					// {
						// celement: q0(31, 0)
						// {
							sc_lv<32>* q0_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q0(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q0[0]) != NULL) // check the null address if the c port is array or others
								{
									q0_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q0_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q0(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q0[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q0[0]
								// output_left_conversion : q0[i_0]
								// output_type_conversion : (q0_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q0[0]) != NULL) // check the null address if the c port is array or others
								{
									q0[i_0] = (q0_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q0_pc_buffer;
		}

		// output port post check: "q1"
		aesl_fh.read(AUTOTB_TVOUT_PC_q1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q1, AESL_token); // data

			sc_bv<32> *q1_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q1
				{
					// bitslice(31, 0)
					// {
						// celement: q1(31, 0)
						// {
							sc_lv<32>* q1_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q1(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q1[0]) != NULL) // check the null address if the c port is array or others
								{
									q1_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q1_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q1(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q1[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q1[0]
								// output_left_conversion : q1[i_0]
								// output_type_conversion : (q1_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q1[0]) != NULL) // check the null address if the c port is array or others
								{
									q1[i_0] = (q1_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q1_pc_buffer;
		}

		// output port post check: "q2"
		aesl_fh.read(AUTOTB_TVOUT_PC_q2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q2, AESL_token); // data

			sc_bv<32> *q2_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q2
				{
					// bitslice(31, 0)
					// {
						// celement: q2(31, 0)
						// {
							sc_lv<32>* q2_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q2(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q2[0]) != NULL) // check the null address if the c port is array or others
								{
									q2_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q2_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q2(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q2[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q2[0]
								// output_left_conversion : q2[i_0]
								// output_type_conversion : (q2_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q2[0]) != NULL) // check the null address if the c port is array or others
								{
									q2[i_0] = (q2_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q2_pc_buffer;
		}

		// output port post check: "q3"
		aesl_fh.read(AUTOTB_TVOUT_PC_q3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q3, AESL_token); // data

			sc_bv<32> *q3_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q3
				{
					// bitslice(31, 0)
					// {
						// celement: q3(31, 0)
						// {
							sc_lv<32>* q3_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q3(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q3[0]) != NULL) // check the null address if the c port is array or others
								{
									q3_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q3_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q3(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q3[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q3[0]
								// output_left_conversion : q3[i_0]
								// output_type_conversion : (q3_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q3[0]) != NULL) // check the null address if the c port is array or others
								{
									q3[i_0] = (q3_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q3_pc_buffer;
		}

		// output port post check: "q4"
		aesl_fh.read(AUTOTB_TVOUT_PC_q4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q4, AESL_token); // data

			sc_bv<32> *q4_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q4
				{
					// bitslice(31, 0)
					// {
						// celement: q4(31, 0)
						// {
							sc_lv<32>* q4_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q4(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q4[0]) != NULL) // check the null address if the c port is array or others
								{
									q4_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q4_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q4(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q4[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q4[0]
								// output_left_conversion : q4[i_0]
								// output_type_conversion : (q4_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q4[0]) != NULL) // check the null address if the c port is array or others
								{
									q4[i_0] = (q4_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q4_pc_buffer;
		}

		// output port post check: "q5"
		aesl_fh.read(AUTOTB_TVOUT_PC_q5, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q5, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q5, AESL_token); // data

			sc_bv<32> *q5_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q5_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q5, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q5))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q5
				{
					// bitslice(31, 0)
					// {
						// celement: q5(31, 0)
						// {
							sc_lv<32>* q5_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q5(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q5[0]) != NULL) // check the null address if the c port is array or others
								{
									q5_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q5_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q5(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q5[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q5[0]
								// output_left_conversion : q5[i_0]
								// output_type_conversion : (q5_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q5[0]) != NULL) // check the null address if the c port is array or others
								{
									q5[i_0] = (q5_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q5_pc_buffer;
		}

		// output port post check: "q6"
		aesl_fh.read(AUTOTB_TVOUT_PC_q6, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q6, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q6, AESL_token); // data

			sc_bv<32> *q6_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q6_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q6, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q6))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q6
				{
					// bitslice(31, 0)
					// {
						// celement: q6(31, 0)
						// {
							sc_lv<32>* q6_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q6(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q6[0]) != NULL) // check the null address if the c port is array or others
								{
									q6_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q6_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q6(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q6[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q6[0]
								// output_left_conversion : q6[i_0]
								// output_type_conversion : (q6_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q6[0]) != NULL) // check the null address if the c port is array or others
								{
									q6[i_0] = (q6_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q6_pc_buffer;
		}

		// output port post check: "q7"
		aesl_fh.read(AUTOTB_TVOUT_PC_q7, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_q7, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_q7, AESL_token); // data

			sc_bv<32> *q7_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'q7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					q7_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_q7, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_q7))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: q7
				{
					// bitslice(31, 0)
					// {
						// celement: q7(31, 0)
						// {
							sc_lv<32>* q7_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q7(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(q7[0]) != NULL) // check the null address if the c port is array or others
								{
									q7_lv0_0_31_1[hls_map_index].range(31, 0) = sc_bv<32>(q7_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: q7(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : q7[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : q7[0]
								// output_left_conversion : q7[i_0]
								// output_type_conversion : (q7_lv0_0_31_1[hls_map_index]).to_uint64()
								if (&(q7[0]) != NULL) // check the null address if the c port is array or others
								{
									q7[i_0] = (q7_lv0_0_31_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] q7_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "q0"
		char* tvin_q0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q0);
		char* tvout_q0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q0);

		// "q1"
		char* tvin_q1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q1);
		char* tvout_q1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q1);

		// "q2"
		char* tvin_q2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q2);
		char* tvout_q2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q2);

		// "q3"
		char* tvin_q3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q3);
		char* tvout_q3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q3);

		// "q4"
		char* tvin_q4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q4);
		char* tvout_q4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q4);

		// "q5"
		char* tvin_q5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q5);
		char* tvout_q5 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q5);

		// "q6"
		char* tvin_q6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q6);
		char* tvout_q6 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q6);

		// "q7"
		char* tvin_q7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_q7);
		char* tvout_q7 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_q7);

		// "zetas"
		char* tvin_zetas = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_zetas);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_q0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q0, tvin_q0);

		sc_bv<32>* q0_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q0(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q0[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q0[0]
						// regulate_c_name       : q0
						// input_type_conversion : q0[i_0]
						if (&(q0[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q0_tmp_mem;
							q0_tmp_mem = q0[i_0];
							q0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q0_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q0, "%s\n", (q0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q0, tvin_q0);
		}

		tcl_file.set_num(32, &tcl_file.q0_depth);
		sprintf(tvin_q0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q0, tvin_q0);

		// release memory allocation
		delete [] q0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q1, tvin_q1);

		sc_bv<32>* q1_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q1(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q1[0]
						// regulate_c_name       : q1
						// input_type_conversion : q1[i_0]
						if (&(q1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q1_tmp_mem;
							q1_tmp_mem = q1[i_0];
							q1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q1_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q1, "%s\n", (q1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q1, tvin_q1);
		}

		tcl_file.set_num(32, &tcl_file.q1_depth);
		sprintf(tvin_q1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q1, tvin_q1);

		// release memory allocation
		delete [] q1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q2, tvin_q2);

		sc_bv<32>* q2_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q2(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q2[0]
						// regulate_c_name       : q2
						// input_type_conversion : q2[i_0]
						if (&(q2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q2_tmp_mem;
							q2_tmp_mem = q2[i_0];
							q2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q2_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q2, "%s\n", (q2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q2, tvin_q2);
		}

		tcl_file.set_num(32, &tcl_file.q2_depth);
		sprintf(tvin_q2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q2, tvin_q2);

		// release memory allocation
		delete [] q2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q3, tvin_q3);

		sc_bv<32>* q3_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q3(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q3[0]
						// regulate_c_name       : q3
						// input_type_conversion : q3[i_0]
						if (&(q3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q3_tmp_mem;
							q3_tmp_mem = q3[i_0];
							q3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q3_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q3, "%s\n", (q3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q3, tvin_q3);
		}

		tcl_file.set_num(32, &tcl_file.q3_depth);
		sprintf(tvin_q3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q3, tvin_q3);

		// release memory allocation
		delete [] q3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q4, tvin_q4);

		sc_bv<32>* q4_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q4(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q4[0]
						// regulate_c_name       : q4
						// input_type_conversion : q4[i_0]
						if (&(q4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q4_tmp_mem;
							q4_tmp_mem = q4[i_0];
							q4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q4_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q4, "%s\n", (q4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q4, tvin_q4);
		}

		tcl_file.set_num(32, &tcl_file.q4_depth);
		sprintf(tvin_q4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q4, tvin_q4);

		// release memory allocation
		delete [] q4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q5, tvin_q5);

		sc_bv<32>* q5_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q5(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q5[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q5[0]
						// regulate_c_name       : q5
						// input_type_conversion : q5[i_0]
						if (&(q5[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q5_tmp_mem;
							q5_tmp_mem = q5[i_0];
							q5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q5_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q5, "%s\n", (q5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q5, tvin_q5);
		}

		tcl_file.set_num(32, &tcl_file.q5_depth);
		sprintf(tvin_q5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q5, tvin_q5);

		// release memory allocation
		delete [] q5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q6, tvin_q6);

		sc_bv<32>* q6_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q6(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q6[0]
						// regulate_c_name       : q6
						// input_type_conversion : q6[i_0]
						if (&(q6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q6_tmp_mem;
							q6_tmp_mem = q6[i_0];
							q6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q6_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q6, "%s\n", (q6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q6, tvin_q6);
		}

		tcl_file.set_num(32, &tcl_file.q6_depth);
		sprintf(tvin_q6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q6, tvin_q6);

		// release memory allocation
		delete [] q6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_q7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_q7, tvin_q7);

		sc_bv<32>* q7_tvin_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q7(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q7[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q7[0]
						// regulate_c_name       : q7
						// input_type_conversion : q7[i_0]
						if (&(q7[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q7_tmp_mem;
							q7_tmp_mem = q7[i_0];
							q7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = q7_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvin_q7, "%s\n", (q7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_q7, tvin_q7);
		}

		tcl_file.set_num(32, &tcl_file.q7_depth);
		sprintf(tvin_q7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_q7, tvin_q7);

		// release memory allocation
		delete [] q7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_zetas, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_zetas, tvin_zetas);

		sc_bv<32>* zetas_tvin_wrapc_buffer = new sc_bv<32>[256];

		// RTL Name: zetas
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: zetas(31, 0)
				{
					// carray: (0) => (255) @ (1)
					for (int i_0 = 0; i_0 <= 255; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : zetas[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : zetas[0]
						// regulate_c_name       : zetas
						// input_type_conversion : zetas[i_0]
						if (&(zetas[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> zetas_tmp_mem;
							zetas_tmp_mem = zetas[i_0];
							zetas_tvin_wrapc_buffer[hls_map_index].range(31, 0) = zetas_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 256; i++)
		{
			sprintf(tvin_zetas, "%s\n", (zetas_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_zetas, tvin_zetas);
		}

		tcl_file.set_num(256, &tcl_file.zetas_depth);
		sprintf(tvin_zetas, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_zetas, tvin_zetas);

		// release memory allocation
		delete [] zetas_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		ntt(q0, q1, q2, q3, q4, q5, q6, q7, zetas);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_q0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q0, tvout_q0);

		sc_bv<32>* q0_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q0(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q0[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q0[0]
						// regulate_c_name       : q0
						// input_type_conversion : q0[i_0]
						if (&(q0[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q0_tmp_mem;
							q0_tmp_mem = q0[i_0];
							q0_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q0_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q0, "%s\n", (q0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q0, tvout_q0);
		}

		tcl_file.set_num(32, &tcl_file.q0_depth);
		sprintf(tvout_q0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q0, tvout_q0);

		// release memory allocation
		delete [] q0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q1, tvout_q1);

		sc_bv<32>* q1_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q1(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q1[0]
						// regulate_c_name       : q1
						// input_type_conversion : q1[i_0]
						if (&(q1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q1_tmp_mem;
							q1_tmp_mem = q1[i_0];
							q1_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q1_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q1, "%s\n", (q1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q1, tvout_q1);
		}

		tcl_file.set_num(32, &tcl_file.q1_depth);
		sprintf(tvout_q1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q1, tvout_q1);

		// release memory allocation
		delete [] q1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q2, tvout_q2);

		sc_bv<32>* q2_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q2(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q2[0]
						// regulate_c_name       : q2
						// input_type_conversion : q2[i_0]
						if (&(q2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q2_tmp_mem;
							q2_tmp_mem = q2[i_0];
							q2_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q2_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q2, "%s\n", (q2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q2, tvout_q2);
		}

		tcl_file.set_num(32, &tcl_file.q2_depth);
		sprintf(tvout_q2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q2, tvout_q2);

		// release memory allocation
		delete [] q2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q3, tvout_q3);

		sc_bv<32>* q3_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q3(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q3[0]
						// regulate_c_name       : q3
						// input_type_conversion : q3[i_0]
						if (&(q3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q3_tmp_mem;
							q3_tmp_mem = q3[i_0];
							q3_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q3_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q3, "%s\n", (q3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q3, tvout_q3);
		}

		tcl_file.set_num(32, &tcl_file.q3_depth);
		sprintf(tvout_q3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q3, tvout_q3);

		// release memory allocation
		delete [] q3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q4, tvout_q4);

		sc_bv<32>* q4_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q4(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q4[0]
						// regulate_c_name       : q4
						// input_type_conversion : q4[i_0]
						if (&(q4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q4_tmp_mem;
							q4_tmp_mem = q4[i_0];
							q4_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q4_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q4, "%s\n", (q4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q4, tvout_q4);
		}

		tcl_file.set_num(32, &tcl_file.q4_depth);
		sprintf(tvout_q4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q4, tvout_q4);

		// release memory allocation
		delete [] q4_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q5, tvout_q5);

		sc_bv<32>* q5_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q5(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q5[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q5[0]
						// regulate_c_name       : q5
						// input_type_conversion : q5[i_0]
						if (&(q5[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q5_tmp_mem;
							q5_tmp_mem = q5[i_0];
							q5_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q5_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q5, "%s\n", (q5_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q5, tvout_q5);
		}

		tcl_file.set_num(32, &tcl_file.q5_depth);
		sprintf(tvout_q5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q5, tvout_q5);

		// release memory allocation
		delete [] q5_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q6, tvout_q6);

		sc_bv<32>* q6_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q6(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q6[0]
						// regulate_c_name       : q6
						// input_type_conversion : q6[i_0]
						if (&(q6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q6_tmp_mem;
							q6_tmp_mem = q6[i_0];
							q6_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q6_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q6, "%s\n", (q6_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q6, tvout_q6);
		}

		tcl_file.set_num(32, &tcl_file.q6_depth);
		sprintf(tvout_q6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q6, tvout_q6);

		// release memory allocation
		delete [] q6_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_q7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_q7, tvout_q7);

		sc_bv<32>* q7_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: q7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: q7(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : q7[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : q7[0]
						// regulate_c_name       : q7
						// input_type_conversion : q7[i_0]
						if (&(q7[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> q7_tmp_mem;
							q7_tmp_mem = q7[i_0];
							q7_tvout_wrapc_buffer[hls_map_index].range(31, 0) = q7_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_q7, "%s\n", (q7_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_q7, tvout_q7);
		}

		tcl_file.set_num(32, &tcl_file.q7_depth);
		sprintf(tvout_q7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_q7, tvout_q7);

		// release memory allocation
		delete [] q7_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "q0"
		delete [] tvin_q0;
		delete [] tvout_q0;
		// release memory allocation: "q1"
		delete [] tvin_q1;
		delete [] tvout_q1;
		// release memory allocation: "q2"
		delete [] tvin_q2;
		delete [] tvout_q2;
		// release memory allocation: "q3"
		delete [] tvin_q3;
		delete [] tvout_q3;
		// release memory allocation: "q4"
		delete [] tvin_q4;
		delete [] tvout_q4;
		// release memory allocation: "q5"
		delete [] tvin_q5;
		delete [] tvout_q5;
		// release memory allocation: "q6"
		delete [] tvin_q6;
		delete [] tvout_q6;
		// release memory allocation: "q7"
		delete [] tvin_q7;
		delete [] tvout_q7;
		// release memory allocation: "zetas"
		delete [] tvin_zetas;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

